/*
 Icebreaker and IceSugar RSMB5 project - RV32I for Lattice iCE40
 With complete open-source toolchain flow using:
 -> yosys 
 -> icarus verilog
 -> icestorm project

 Tests are written in several languages
 -> Systemverilog Pure Testbench (Vivado)
 -> UVM testbench (Vivado)
 -> PyUvm (Icarus)
 -> Formal either using SVA and PSL (Vivado) or cuncurrent assertions with Yosys

 Copyright (c) 2021 Raffaele Signoriello (raff.signoriello92@gmail.com)

 Permission is hereby granted, free of charge, to any person obtaining a 
 copy of this software and associated documentation files (the "Software"), 
 to deal in the Software without restriction, including without limitation 
 the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 and/or sell copies of the Software, and to permit persons to whom the 
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included 
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* This file contains the Register interface implamantation
 * -> this file autogenerated based on the RDL file provided
 * -> it can be changed or can be encapsulated to add additional
 * -> functionalities.
*/

`ifndef COCOTB_SIM
// Main Inclusion
`include "./apb_design_includes.sv"
`else
// Main Inclusion
`include "/Volumes/My_Data/MY_SYSTEMVERILOG_UVM_PROJECTS/APB_PROTOCOL/APB_SLAVE/Design/apb_design_includes.sv"
`include "/Volumes/My_Data/MY_SYSTEMVERILOG_UVM_PROJECTS/APB_PROTOCOL/APB_SLAVE/Apb_Reggen/output_all/apb_reg_param.svh"
`endif

// Main Module
module apb_rif #(
	  // Parameter Declaration
	  parameter REG_WIDTH 						= 32,
	  parameter ERROUT_IF_NOT_ACCESS	= 1
  )
(
		// Port Declaration
		// General RIF input port
  	input logic 									rif_clk,    				// Clock
  	input logic 									rif_arst,   				// Asynchronous reset active high
  	input logic 									rif_write,  				// If 0 -> Read if 1 -> Write
  	input logic 									rif_cs,     				// States if the slave has been properly selected 
  	input logic [REG_WIDTH-1:0] 	rif_addr, 					// Address coming into the bus
  	input logic [REG_WIDTH-1:0] 	rif_wdata,  				// Write Data coming into the bus
  	// Sets of input ports for HW write access
  	input logic [REG_WIDTH-1:0] 	data_status_1_in,
  	input logic [REG_WIDTH-1:0] 	data_status_2_in,
  	input logic [REG_WIDTH-1:0] 	data_status_3_in,
  	// Sets of output ports for HW read access
  	output logic [REG_WIDTH-1:0]  data_1_out,
  	output logic [REG_WIDTH-1:0]  data_2_out,
  	output logic [REG_WIDTH-1:0]  data_3_out,
  	output logic [REG_WIDTH-1:0]  write_enable_out,
  	// General RIF output ports
  	output logic [REG_WIDTH-1:0]  rif_rdata,  				// Read Data coming out the bus
  	output logic 									rif_error,  				// Give error in few specific conditions only 
  	output logic 									rif_ready   				// Is controlled by the slave and claims if the specifc slave is busy or not
);

    // Sets of DEC flags
    logic data_status_1_dec; 
    logic data_status_2_dec;
    logic data_status_3_dec;
    logic data_1_dec;
    logic data_2_dec;
    logic data_3_dec;
    logic write_enable_dec;

    // DESC: Sets of registers Access Policy is RW if RO according to the enable then it should be gated externally
    logic [REG_WIDTH-1:0] data_1;
    logic [REG_WIDTH-1:0] data_2;
    logic [REG_WIDTH-1:0] data_3;

    // DESC: Sets of registers Access Policy is RO
    logic [REG_WIDTH-1:0] data_status_1;
    logic [REG_WIDTH-1:0] data_status_2;
    logic [REG_WIDTH-1:0] data_status_3;

    // DESC: write enable signal
    logic [REG_WIDTH-1:0] write_enable;

    // Register Access Process
    logic error_handler, error_access;
    logic wr_rq, rd_rq;

    // Register decoder we are addressing 1Word at time so remove the first 2 bits
    logic [REG_WIDTH-1:0] reg_dec, reg_dec_dly;
    
    assign reg_dec = rif_addr >> 2;
    always_ff@(posedge rif_clk or posedge rif_arst) begin
      if(rif_arst)  reg_dec_dly <= 'h0;
      else      		reg_dec_dly <= reg_dec;
    end
  	
  	// Assign the WR_REQUEST and RD_REQUEST
  	assign wr_rq = rif_write & rif_cs;
  	assign rd_rq = ~rif_write & rif_cs;

  	// Register the request to be used for the READY signal
  	logic [1:0] regsistered_request;
  	always_ff @(posedge rif_clk or posedge rif_arst) begin : request_reg
  		if(rif_arst) begin
  			regsistered_request <= 2'b11;
  		end else begin
  			// Regardless of the read of write request we have to register the CS
  			regsistered_request[0] <= (~rif_cs);
  			regsistered_request[1] <= regsistered_request[0];
  		end
  	end

  	// Address decoding with full combo logic
  	always_comb begin: addres_decoding
  		// Initialize
    	data_1_dec 				= 0; 	
   	 	data_2_dec 				= 0;
    	data_3_dec 				= 0;
    	write_enable_dec 	= 0;
  		data_status_1_dec = 0;
    	data_status_2_dec = 0;
    	data_status_3_dec = 0;
    	error_access      = 0;
    	// Select using the address
    	case (rif_addr) 
    		`register_data1: 					begin data_1_dec = 1; end
    		`register_data2: 					begin data_2_dec = 1; end
    		`register_data3: 					begin data_3_dec = 1; end
    		`register_write_enable: 	begin write_enable_dec = 1; end
    		`register_data_status_1: 	begin data_status_1_dec = 1; end
    		`register_data_status_1: 	begin data_status_2_dec = 1; end
    		`register_data_status_1: 	begin data_status_3_dec = 1; end
    		default: begin 
    			if(ERROUT_IF_NOT_ACCESS)	error_access = 1;
    			else 										 	error_access = 0;
    		end
    	endcase
  	end

    // Register posedge and Access
    always_ff @(posedge rif_clk or posedge rif_arst) begin : proc_reg
      if(rif_arst) begin
        rif_rdata			<= '0;
        // Init only HW = R registers
      	data_1 				<= '0; 	
   	 	  data_2 				<= '0;
    	  data_3 				<= '0;
      end 
      else begin: reg_decoder
      	// Logic for HW = R and SW = RW
      	if(data_1_dec) begin
          if(wr_rq) begin
          	data_1 					<= rif_wdata;
          end
          else if(rd_rq) begin
          	rif_rdata    		<= data_1;
        	end	
      	end 
      	else if(data_2_dec) begin
          if(wr_rq) begin
          	data_2 					<= rif_wdata;
          end
          else if(rd_rq) begin
          	rif_rdata    		<= data_2;
        	end	      		
      	end
      	else if(data_3_dec) begin
          if(wr_rq) begin
          	data_3 					<= rif_wdata;
          end
          else if(rd_rq) begin
          	rif_rdata    		<= data_3;
        	end	      		
      	end
      	else if(write_enable_dec) begin
          if(wr_rq) begin
          	write_enable  	<= rif_wdata;
          end
          else if(rd_rq) begin
          	rif_rdata    		<= write_enable;
        	end	       		
      	end
      	// Logic for HW = W and SW = RO
      	else if(data_status_1_dec) begin
          if(rd_rq) begin
          	rif_rdata    		<= data_status_1;
        	end	      		
      	end 
      	else if(data_status_2_dec) begin
					if(rd_rq) begin
          	rif_rdata    		<= data_status_2;
        	end	        		
      	end
      	else if(data_status_3_dec) begin
					if(rd_rq) begin
          	rif_rdata    		<= data_status_3;
        	end	        		
      	end
      end
    end

    // check the error using COMBO logic to avoiud being missed by the register
    always_comb
      	// Logic for HW = W and SW = RO
      	if(data_status_1_dec) begin
          if(wr_rq) begin
          	error_handler 	= 1'b1;
          end
          else if(rd_rq) begin
          	rif_rdata    		= data_status_1;
        		error_handler 	= 1'b0;
        	end	      		
      	end 
      	else if(data_status_2_dec) begin
          if(wr_rq) begin
          	error_handler 	= 1'b1;
          end
          else if(rd_rq) begin
          	rif_rdata    		= data_status_2;
        		error_handler 	= 1'b0;
        	end	        		
      	end
      	else if(data_status_3_dec) begin
          if(wr_rq) begin
          	error_handler 	= 1'b1;
          end
          else if(rd_rq) begin
          	rif_rdata    		= data_status_3;
        		error_handler 	= 1'b0;
        	end	        		
      	end

    // assign the Error output
    assign rif_error = rif_cs ? (error_handler | error_access) : '0;

    // Assign the ready signal
    assign rif_ready = &(regsistered_request);

    // Assignements for HW = R policy
    assign write_enable_out	= rif_cs ? write_enable : '0;
    assign data_1_out				= rif_cs ? data_1 : '0;
    assign data_2_out				= rif_cs ? data_2 : '0;
    assign data_3_out				= rif_cs ? data_3 : '0;

    // Assignements for HW = W policy
    assign data_status_1 	= data_status_1_in; 
    assign data_status_2 	= data_status_2_in;
    assign data_status_3 	= data_status_3_in;
endmodule : apb_rif