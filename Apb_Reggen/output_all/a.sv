//   Ordt 190617.01 autogenerated file 
//   Input: example.rdl
//   Parms: ./example.parms
//   Date: Sat Nov 06 22:50:13 GMT 2021
//

import uvm_pkg::*;
`include "uvm_macros.svh"

// Register sr1
class reg_top_sr1 extends uvm_reg;
  rand uvm_reg_field fld1;
  
  function new(string name = "reg_top_sr1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
  endfunction: build
  
  `uvm_object_utils(reg_top_sr1)
endclass : reg_top_sr1

// Register wr1
class reg_top_wr1 extends uvm_reg;
  rand uvm_reg_field fld1;
  rand uvm_reg_field fld2;
  rand uvm_reg_field fld3;
  rand uvm_reg_field fld4;
  rand uvm_reg_field fld5;
  rand uvm_reg_field fld6;
  rand uvm_reg_field fld7;
  rand uvm_reg_field fld8;
  
  function new(string name = "reg_top_wr1");
    super.new(name, 128, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.fld2 = new("fld2");
    this.fld2.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.fld3 = new("fld3");
    this.fld3.configure(this, 16, 32, "RW", 0, 16'h0, 1, 1, 0);
    this.fld4 = new("fld4");
    this.fld4.configure(this, 16, 48, "RW", 0, 16'h0, 1, 1, 0);
    this.fld5 = new("fld5");
    this.fld5.configure(this, 16, 64, "RW", 0, 16'h0, 1, 1, 0);
    this.fld6 = new("fld6");
    this.fld6.configure(this, 16, 80, "RW", 0, 16'h0, 1, 1, 0);
    this.fld7 = new("fld7");
    this.fld7.configure(this, 16, 96, "RW", 0, 16'h0, 1, 1, 0);
    this.fld8 = new("fld8");
    this.fld8.configure(this, 16, 112, "RW", 0, 16'h0, 1, 1, 0);
  endfunction: build
  
  `uvm_object_utils(reg_top_wr1)
endclass : reg_top_wr1

// Register sr_repeat1
class reg_top_sr_repeat1 extends uvm_reg;
  rand uvm_reg_field fld1;
  
  function new(string name = "reg_top_sr_repeat1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
  endfunction: build
  
  `uvm_object_utils(reg_top_sr_repeat1)
endclass : reg_top_sr_repeat1

// Register sr_repeat2
class reg_top_sr_repeat2 extends uvm_reg;
  rand uvm_reg_field fld1;
  
  function new(string name = "reg_top_sr_repeat2");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
  endfunction: build
  
  `uvm_object_utils(reg_top_sr_repeat2)
endclass : reg_top_sr_repeat2

// Register sr_repeat3
class reg_top_sr_repeat3 extends uvm_reg;
  rand uvm_reg_field fld1;
  
  function new(string name = "reg_top_sr_repeat3");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
  endfunction: build
  
  `uvm_object_utils(reg_top_sr_repeat3)
endclass : reg_top_sr_repeat3

// Virtual Register srmem1
class vreg_top_srmem1 extends uvm_vreg;
  rand uvm_vreg_field fld1;
  
  function new(string name = "vreg_top_srmem1");
    super.new(name, 32);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 32, 0);
  endfunction: build
  
endclass : vreg_top_srmem1

// Uvm_mem wrapper block srmem1
class block_mem_wrap_top_srmem1 extends uvm_reg_block;
  rand uvm_mem mem;
  rand vreg_top_srmem1 vregs;
  
  function new(string name = "block_mem_wrap_top_srmem1");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.mem = new("mem", 100, 32);
    this.mem.configure(this);
    this.vregs = new;
    this.vregs.configure(this, mem, 100);
    this.vregs.build();
    this.default_map.add_mem(this.mem, `UVM_REG_ADDR_WIDTH'h0);
  endfunction: build
  
  `uvm_object_utils(block_mem_wrap_top_srmem1)
endclass : block_mem_wrap_top_srmem1

// Register wrmem1
class reg_top_wrmem1 extends uvm_reg;
  rand uvm_reg_field fld1;
  rand uvm_reg_field fld2;
  rand uvm_reg_field fld3;
  rand uvm_reg_field fld4;
  rand uvm_reg_field fld5;
  rand uvm_reg_field fld6;
  rand uvm_reg_field fld7;
  rand uvm_reg_field fld8;
  
  function new(string name = "reg_top_wrmem1");
    super.new(name, 128, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    this.fld1 = new("fld1");
    this.fld1.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.fld2 = new("fld2");
    this.fld2.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.fld3 = new("fld3");
    this.fld3.configure(this, 16, 32, "RW", 0, 16'h0, 1, 1, 0);
    this.fld4 = new("fld4");
    this.fld4.configure(this, 16, 48, "RW", 0, 16'h0, 1, 1, 0);
    this.fld5 = new("fld5");
    this.fld5.configure(this, 16, 64, "RW", 0, 16'h0, 1, 1, 0);
    this.fld6 = new("fld6");
    this.fld6.configure(this, 16, 80, "RW", 0, 16'h0, 1, 1, 0);
    this.fld7 = new("fld7");
    this.fld7.configure(this, 16, 96, "RW", 0, 16'h0, 1, 1, 0);
    this.fld8 = new("fld8");
    this.fld8.configure(this, 16, 112, "RW", 0, 16'h0, 1, 1, 0);
  endfunction: build
  
  `uvm_object_utils(reg_top_wrmem1)
endclass : reg_top_wrmem1

// Base block
class block_top extends uvm_reg_block;
  rand reg_top_sr1 sr1;
  rand reg_top_wr1 wr1;
  rand reg_top_sr_repeat1 sr_repeat1;
  rand reg_top_sr_repeat2 sr_repeat2;
  rand reg_top_sr_repeat3 sr_repeat3;
  rand block_mem_wrap_top_srmem1 srmem1;
  rand reg_top_wrmem1 wrmem1[300];
  
  function new(string name = "block_top");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 16, UVM_LITTLE_ENDIAN, 1);
    this.sr1 = reg_top_sr1::type_id::create("sr1");
    this.sr1.configure(this, null, "");
    this.sr1.build();
    this.default_map.add_reg(this.sr1, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.wr1 = reg_top_wr1::type_id::create("wr1");
    this.wr1.configure(this, null, "");
    this.wr1.build();
    this.default_map.add_reg(this.wr1, `UVM_REG_ADDR_WIDTH'h100, "RW", 0);
    this.sr_repeat1 = reg_top_sr_repeat1::type_id::create("sr_repeat1");
    this.sr_repeat1.configure(this, null, "");
    this.sr_repeat1.build();
    this.default_map.add_reg(this.sr_repeat1, `UVM_REG_ADDR_WIDTH'h200, "RW", 0);
    this.sr_repeat2 = reg_top_sr_repeat2::type_id::create("sr_repeat2");
    this.sr_repeat2.configure(this, null, "");
    this.sr_repeat2.build();
    this.default_map.add_reg(this.sr_repeat2, `UVM_REG_ADDR_WIDTH'h204, "RW", 0);
    this.sr_repeat3 = reg_top_sr_repeat3::type_id::create("sr_repeat3");
    this.sr_repeat3.configure(this, null, "");
    this.sr_repeat3.build();
    this.default_map.add_reg(this.sr_repeat3, `UVM_REG_ADDR_WIDTH'h208, "RW", 0);
    this.srmem1 = block_mem_wrap_top_srmem1::type_id::create("srmem1",, get_full_name());
    this.srmem1.configure(this, "");
    this.srmem1.build();
    this.default_map.add_submap(this.srmem1.default_map, `UVM_REG_ADDR_WIDTH'h2000);
    foreach (this.wrmem1[i]) begin
      this.wrmem1[i] = reg_top_wrmem1::type_id::create($psprintf("wrmem1 [%0d]",i));
      this.wrmem1[i].configure(this, null, "");
      this.wrmem1[i].build();
      this.default_map.add_reg(this.wrmem1[i], `UVM_REG_ADDR_WIDTH'h20000+i*`UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    end
  endfunction: build
  
  `uvm_object_utils(block_top)
endclass : block_top
