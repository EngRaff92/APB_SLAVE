
## Icebreaker and IceSugar RSMB5 project - RV32I for Lattice iCE40
## With complete open-source toolchain flow using:
## -> yosys 
## -> icarus verilog
## -> icestorm project
## 
## Tests are written in several languages
## -> Systemverilog Pure Testbench (Vivado)
## -> UVM testbench (Vivado)
## -> PyUvm (Icarus)
## -> Formal either using SVA and PSL (Vivado) or cuncurrent assertions with Yosys
## 
## Copyright (c) 2021 Raffaele Signoriello (raff.signoriello92@gmail.com)
## 
## Permission is hereby granted, free of charge, to any person obtaining a 
## copy of this software and associated documentation files (the "Software"), 
## to deal in the Software without restriction, including without limitation 
## the rights to use, copy, modify, merge, publish, distribute, sublicense, 
## and/or sell copies of the Software, and to permit persons to whom the 
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be included 
## in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

## This file contains register parameters and is autogenerated

## Desc
class data1(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.dt = uvm_reg_field("dt")
    self.dt.configure(self, 32, 0, "Rw", 0, 0)
    
## Desc
class data2(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.dt = uvm_reg_field("dt")
    self.dt.configure(self, 32, 0, "Rw", 0, 0)
    
## Desc
class data3(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.dt = uvm_reg_field("dt")
    self.dt.configure(self, 32, 0, "Rw", 0, 0)
    
## Desc
class write_enable(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.data1_wren = uvm_reg_field("data1_wren")
    self.data1_wren.configure(self, 1, 0, "W", 0, 0)
    
    self.data2_wren = uvm_reg_field("data2_wren")
    self.data2_wren.configure(self, 1, 1, "W", 0, 0)
    
    self.data3_wren = uvm_reg_field("data3_wren")
    self.data3_wren.configure(self, 1, 2, "W", 0, 0)
    
## Desc
class data_status_1(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.status = uvm_reg_field("status")
    self.status.configure(self, 1, 0, "R", 0, 0)
    
## Desc
class data_status_2(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.status = uvm_reg_field("status")
    self.status.configure(self, 1, 0, "R", 0, 0)
    
## Desc
class data_status_3(uvm_reg):
  ''' Main Constructor use to add fields to this specific reg'''
  def __init__(self, name):
    super().__init__(name)
    
    self.status = uvm_reg_field("status")
    self.status.configure(self, 1, 0, "R", 0, 0)
    
##
class apb_rif(uvm_reg_block):
  ''' Main Constructor use to add registers to this specific register map'''
  def __init__(self, name):
    super().__init__(name)
    self.default_map = uvm_reg_map('default_map')
    self.default_map.configure(self, 0x0)
    
    self.data1 = data1("data1")
    self.data1.configure(self)
    self.default_map.add_reg(self.data1, int("0x0", 0))
    
    self.data2 = data2("data2")
    self.data2.configure(self)
    self.default_map.add_reg(self.data2, int("0x4", 0))
    
    self.data3 = data3("data3")
    self.data3.configure(self)
    self.default_map.add_reg(self.data3, int("0x8", 0))
    
    self.write_enable = write_enable("write_enable")
    self.write_enable.configure(self)
    self.default_map.add_reg(self.write_enable, int("0xc", 0))
    
    self.data_status_1 = data_status_1("data_status_1")
    self.data_status_1.configure(self)
    self.default_map.add_reg(self.data_status_1, int("0x10", 0))
    
    self.data_status_2 = data_status_2("data_status_2")
    self.data_status_2.configure(self)
    self.default_map.add_reg(self.data_status_2, int("0x14", 0))
    
    self.data_status_3 = data_status_3("data_status_3")
    self.data_status_3.configure(self)
    self.default_map.add_reg(self.data_status_3, int("0x18", 0))
    