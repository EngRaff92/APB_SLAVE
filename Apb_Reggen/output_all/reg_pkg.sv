
// This file was autogenerated by PeakRDL-uvm
package reg_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - apb_addr_map::apb_rif::data_t
    class apb_addr_map__apb_rif__data_t extends uvm_reg;
        rand uvm_reg_field dt;

        function new(string name = "apb_addr_map__apb_rif__data_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.dt = new("dt");
            this.dt.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : apb_addr_map__apb_rif__data_t

    // Reg - apb_addr_map::apb_rif::wen_t
    class apb_addr_map__apb_rif__wen_t extends uvm_reg;
        rand uvm_reg_field data1_wren;
        rand uvm_reg_field data2_wren;
        rand uvm_reg_field data3_wren;

        function new(string name = "apb_addr_map__apb_rif__wen_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.data1_wren = new("data1_wren");
            this.data1_wren.configure(this, 1, 0, "WO", 0, 'h0, 1, 1, 0);
            this.data2_wren = new("data2_wren");
            this.data2_wren.configure(this, 1, 1, "WO", 0, 'h0, 1, 1, 0);
            this.data3_wren = new("data3_wren");
            this.data3_wren.configure(this, 1, 2, "WO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : apb_addr_map__apb_rif__wen_t

    // Reg - apb_addr_map::apb_rif::status_t
    class apb_addr_map__apb_rif__status_t extends uvm_reg;
        rand uvm_reg_field status;

        function new(string name = "apb_addr_map__apb_rif__status_t");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.status = new("status");
            this.status.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
        endfunction : build
    endclass : apb_addr_map__apb_rif__status_t

    // Regfile - apb_addr_map::apb_rif
    class apb_addr_map__apb_rif extends uvm_reg_block;
        rand apb_addr_map__apb_rif__data_t data1;
        rand apb_addr_map__apb_rif__data_t data2;
        rand apb_addr_map__apb_rif__data_t data3;
        rand apb_addr_map__apb_rif__wen_t write_enable;
        rand apb_addr_map__apb_rif__status_t data_status_1;
        rand apb_addr_map__apb_rif__status_t data_status_2;
        rand apb_addr_map__apb_rif__status_t data_status_3;

        function new(string name = "apb_addr_map__apb_rif");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.data1 = new("data1");
            this.data1.configure(this);

            this.data1.build();
            this.default_map.add_reg(this.data1, 'h0);
            this.data2 = new("data2");
            this.data2.configure(this);

            this.data2.build();
            this.default_map.add_reg(this.data2, 'h4);
            this.data3 = new("data3");
            this.data3.configure(this);

            this.data3.build();
            this.default_map.add_reg(this.data3, 'h8);
            this.write_enable = new("write_enable");
            this.write_enable.configure(this);

            this.write_enable.build();
            this.default_map.add_reg(this.write_enable, 'hc);
            this.data_status_1 = new("data_status_1");
            this.data_status_1.configure(this);

            this.data_status_1.build();
            this.default_map.add_reg(this.data_status_1, 'h10);
            this.data_status_2 = new("data_status_2");
            this.data_status_2.configure(this);

            this.data_status_2.build();
            this.default_map.add_reg(this.data_status_2, 'h14);
            this.data_status_3 = new("data_status_3");
            this.data_status_3.configure(this);

            this.data_status_3.build();
            this.default_map.add_reg(this.data_status_3, 'h18);
        endfunction : build
    endclass : apb_addr_map__apb_rif

    // Reg - apb_addr_map::apb_mem::r1
    class apb_addr_map__apb_mem__r1 extends uvm_vreg;
        rand uvm_vreg_field dm;

        function new(string name = "apb_addr_map__apb_mem__r1");
            super.new(name, 32);
        endfunction : new

        virtual function void build();
            this.dm = new("dm");
            this.dm.configure(this, 32, 0);
        endfunction : build
    endclass : apb_addr_map__apb_mem__r1

    // Mem - apb_addr_map::apb_mem
    class apb_addr_map__apb_mem extends uvm_reg_block;
        rand uvm_mem m_mem;
        rand apb_addr_map__apb_mem__r1 r1;

        function new(string name = "apb_addr_map__apb_mem");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4.0, UVM_NO_ENDIAN);
            this.m_mem = new("m_mem", 256, 32, "RW");
            this.m_mem.configure(this);
            this.default_map.add_mem(this.m_mem, 0);
            this.r1 = new("r1");
            this.r1.configure(this, this.m_mem, 256);
            this.r1.build();
        endfunction : build
    endclass : apb_addr_map__apb_mem

    // Addrmap - apb_addr_map
    class apb_addr_map extends uvm_reg_block;
        rand apb_addr_map__apb_rif apb_rif;
        rand apb_addr_map__apb_mem apb_mem;

        function new(string name = "apb_addr_map");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            this.apb_rif = new("apb_rif");
            this.apb_rif.configure(this);
            this.apb_rif.build();
            this.default_map.add_submap(this.apb_rif.default_map, 'h0);
            this.apb_mem = new("apb_mem");
            this.apb_mem.configure(this);
            this.apb_mem.build();
            this.default_map.add_submap(this.apb_mem.default_map, 'h100);
        endfunction : build
    endclass : apb_addr_map

endpackage: reg_pkg
